!function () { window; const e = document.documentElement; if (e.classList.remove("no-js"), e.classList.add("js"), document.body.classList.contains("has-animations")) { (window.sr = ScrollReveal()).reveal(".feature, .pricing-table-inner", { duration: 600, distance: "20px", easing: "cubic-bezier(0.5, -0.01, 0, 1.005)", origin: "bottom", interval: 100 }), e.classList.add("anime-ready"), anime.timeline({ targets: ".hero-figure-box-05" }).add({ duration: 400, easing: "easeInOutExpo", scaleX: [.05, .05], scaleY: [0, 1], perspective: "500px", delay: anime.random(0, 400) }).add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 }).add({ duration: 800, rotateY: "-15deg", rotateX: "8deg", rotateZ: "-1deg" }), anime.timeline({ targets: ".hero-figure-box-06, .hero-figure-box-07" }).add({ duration: 400, easing: "easeInOutExpo", scaleX: [.05, .05], scaleY: [0, 1], perspective: "500px", delay: anime.random(0, 400) }).add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 }).add({ duration: 800, rotateZ: "20deg" }), anime({ targets: ".hero-figure-box-01, .hero-figure-box-02, .hero-figure-box-03, .hero-figure-box-04, .hero-figure-box-08, .hero-figure-box-09, .hero-figure-box-10", duration: anime.random(600, 800), delay: anime.random(600, 800), rotate: [anime.random(-360, 360), function (e) { return e.getAttribute("data-rotation") }], scale: [.7, 1], opacity: [0, 1], easing: "easeInOutExpo" }) } }();

/*-----------------------------------*\
  #Modal Demo
\*-----------------------------------*/
(function () {
    "use strict";

    var DEFAULT_DURATION = 300,
        TRANSITION_CLASSES = {
            transitioningIn: "is-transitioning-in",
            transitionedIn: "is-visible",
            transitioningOut: "is-transitioning-out",
            transitionedOut: "is-hidden"
        },
        SCROLL_LOCK_CLASS = "is-scroll-locked",
        bodyEl = document.body,
        timeoutId,
        triggerEl;

    toArray(document.querySelectorAll("[data-trigger]")).forEach(function (el) {
        var targetEl = document.getElementById(el.getAttribute("data-trigger"));
        var closeEls, dialogEl, durationIn, durationOut;

        if (!targetEl) return;

        closeEls = toArray(targetEl.querySelectorAll("[data-close], button"));
        dialogEl = targetEl.querySelector("[role=dialog]");
        durationIn = parseInt(targetEl.getAttribute("data-in"));
        durationOut = parseInt(targetEl.getAttribute("data-out"));

        el.addEventListener("click", transitionIn);

        function transitionIn(event) {
            closeEls.forEach(function (el) {
                el.addEventListener("click", transitionOut);
            });

            doTransition(
                targetEl,
                TRANSITION_CLASSES.transitionedOut,
                TRANSITION_CLASSES.transitioningIn,
                TRANSITION_CLASSES.transitionedIn,
                !isNaN(durationIn) ? durationIn : DEFAULT_DURATION
            );

            bodyEl.classList.add(SCROLL_LOCK_CLASS);

            triggerEl = document.activeElement;

            focusLock.on(dialogEl);
        }

        function transitionOut(event) {
            if (closeEls.indexOf(event.target) < 0) return;

            closeEls.forEach(function (el) {
                el.removeEventListener("click", transitionOut);
            });

            doTransition(
                targetEl,
                TRANSITION_CLASSES.transitionedIn,
                TRANSITION_CLASSES.transitioningOut,
                TRANSITION_CLASSES.transitionedOut,
                !isNaN(durationOut) ? durationOut : DEFAULT_DURATION
            );

            bodyEl.classList.remove(SCROLL_LOCK_CLASS);

            focusLock.off(dialogEl);

            if (triggerEl) {
                triggerEl.focus();
                triggerEl = undefined;
            }
        }
    });

    function doTransition(el, toClear, active, end, timeout) {
        var classList = el.classList;

        classList.remove(toClear);
        classList.add(active);

        if (timeoutId) {
            clearTimeout(timeoutId);
        }

        timeoutId = setTimeout(function () {
            classList.remove(active);
            classList.add(end);
        }, timeout);
    }

    function toArray(nodeList) {
        return Array.prototype.slice.call(nodeList);
    }
})();